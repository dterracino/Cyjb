<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AggregateSourceException_InnerException" xml:space="preserve">
    <value>---&gt; (Inner Exception #{0}) {1} &lt;---</value>
    <comment>A string of internal exceptions.</comment>
  </data>
  <data name="ArgumentMustBePositive" xml:space="preserve">
    <value>Parameter values must be greater than zero.</value>
    <comment>The parameter value must be greater than zero.</comment>
  </data>
  <data name="ArgumentNegative" xml:space="preserve">
    <value>Parameter values can not be negative.</value>
    <comment>Parameter values can not be negative.</comment>
  </data>
  <data name="ArgumentOutOfRange" xml:space="preserve">
    <value>Parameter values was out of range.</value>
    <comment>Parameter is out of range.</comment>
  </data>
  <data name="ArgumentOutOfRangeBetween" xml:space="preserve">
    <value>Parameter values must be between '{0}' and '{1}'.</value>
    <comment>Parameter is out of range.</comment>
  </data>
  <data name="ArgumentWrongType" xml:space="preserve">
    <value>The parameter value is not a valid type.</value>
    <comment>Parameter values are not valid types.</comment>
  </data>
  <data name="ArgumentWrongType_Specific" xml:space="preserve">
    <value>The parameter value '{0}' is not of type '{1}'.</value>
    <comment>The parameter value is not a specific type.</comment>
  </data>
  <data name="ArrayNonZeroLowerBound" xml:space="preserve">
    <value>The lower bound of array must be zero.</value>
    <comment>The lower bound of the array must be zero.</comment>
  </data>
  <data name="ArrayTooSmall" xml:space="preserve">
    <value>Destination array is not long enough, check array index and length.</value>
    <comment>The target array is too small.</comment>
  </data>
  <data name="AtText" xml:space="preserve">
    <value>  At</value>
    <comment>Text location.</comment>
  </data>
  <data name="CannotCastNullToValueType" xml:space="preserve">
    <value>Null cannot be converted to a value type.</value>
    <comment>Null can not be converted to a value type.</comment>
  </data>
  <data name="CollectionCountDiffer" xml:space="preserve">
    <value>Collection element count must be the same as current collection.</value>
    <comment>The number of collection elements must be the same as the current collection.</comment>
  </data>
  <data name="CollectionEmpty" xml:space="preserve">
    <value>Collection may not be empty.</value>
    <comment>The collection can not be empty.</comment>
  </data>
  <data name="CollectionFixedSize" xml:space="preserve">
    <value>Collection was of a fixed size.</value>
    <comment>The collection is fixed size.</comment>
  </data>
  <data name="CollectionItemCompareFailed" xml:space="preserve">
    <value>Failed to compare two elements in the collection.</value>
    <comment>Compare collection elements failed.</comment>
  </data>
  <data name="CollectionItemNotExist" xml:space="preserve">
    <value>The specified item does not exist in collection.</value>
    <comment>The specified item does not exist in the collection.</comment>
  </data>
  <data name="CollectionItemNull" xml:space="preserve">
    <value>An element of collection was null.</value>
    <comment>There are null elements in the collection.</comment>
  </data>
  <data name="CollectionReadOnly" xml:space="preserve">
    <value>Collection is read-only.</value>
    <comment>The collection is read-only.</comment>
  </data>
  <data name="EnumerationFailed" xml:space="preserve">
    <value>Collection was modified, enumeration operation may not execute.</value>
    <comment>Can not perform enumeration.</comment>
  </data>
  <data name="EnumTypeDoesNotMatch" xml:space="preserve">
    <value>The argument type '{0}' is not the same as the enum type '{1}'.</value>
    <comment>Enumerated parameter types do not match.</comment>
  </data>
  <data name="EnumValueNotFound" xml:space="preserve">
    <value>Requested value '{1}' was not found in enum type '{0}'.</value>
    <comment>Unrecognized enumeration value.</comment>
  </data>
  <data name="ErrorText" xml:space="preserve">
    <value>[Error] </value>
    <comment>Error text.</comment>
  </data>
  <data name="ExtraJunkAtEnd" xml:space="preserve">
    <value>Additional non-parsable characters are at the end of the string.</value>
    <comment>There are other characters that can not be parsed at the end of the string.</comment>
  </data>
  <data name="InvalidBase" xml:space="preserve">
    <value>Base is not between 2 and 36.</value>
    <comment>Invalid base.</comment>
  </data>
  <data name="InvalidCast" xml:space="preserve">
    <value>Specified cast is not valid.</value>
    <comment>A type can not be converted to another type.</comment>
  </data>
  <data name="InvalidCast_FromTo" xml:space="preserve">
    <value>Invalid cast from '{0}' to '{1}'.</value>
    <comment>A type can not be converted to another type.</comment>
  </data>
  <data name="InvalidElementType" xml:space="preserve">
    <value>Target element type is not compatible with the type of items in the collection.</value>
    <comment>The target element type is not compatible with the type of collection item.</comment>
  </data>
  <data name="InvalidOffsetLength" xml:space="preserve">
    <value>Offset and length were out of bounds for the collection.</value>
    <comment>Offset and length are out of bounds.</comment>
  </data>
  <data name="KeyDuplicate" xml:space="preserve">
    <value>An item with the same key has already been added.</value>
    <comment>Items with the same key have been added.</comment>
  </data>
  <data name="KeyNotFound" xml:space="preserve">
    <value>Specific key does not exist.</value>
    <comment>The specified key does not exist.</comment>
  </data>
  <data name="KeyNotFound_Key" xml:space="preserve">
    <value>Key '{0}' does not exist.</value>
    <comment>The specified key does not exist.</comment>
  </data>
  <data name="MethodNotSupported" xml:space="preserve">
    <value>Specified method is not supported.</value>
    <comment>Method is not supported.</comment>
  </data>
  <data name="MultidimensionalArrayNotSupported" xml:space="preserve">
    <value>Only single-dimensional arrays are supported.</value>
    <comment>Multidimensional arrays are not supported.</comment>
  </data>
  <data name="MultidimensionalArrayNotSupported_Param" xml:space="preserve">
    <value>Only single-dimensional arrays are supported of parameter '{0}'.</value>
    <comment>Multidimensional arrays are not supported.</comment>
  </data>
  <data name="MustBeDelegate" xml:space="preserve">
    <value>Type must derive from Delegate.</value>
    <comment>The type must be derived from the delegate.</comment>
  </data>
  <data name="MustBeDelegate_Type" xml:space="preserve">
    <value>Type '{0}' must derive from Delegate.</value>
    <comment>The type must be derived from the delegate.</comment>
  </data>
  <data name="MustBeEnum" xml:space="preserve">
    <value>Type must be an Enum.</value>
    <comment>Must be an enumerated type.</comment>
  </data>
  <data name="MustBeEnum_Type" xml:space="preserve">
    <value>Type '{0}' must be an Enum.</value>
    <comment>Must be an enumerated type.</comment>
  </data>
  <data name="NegativeUnsigned" xml:space="preserve">
    <value>The string was being parsed as an unsigned number and could not have a negative sign.</value>
    <comment>An unsigned string can not contain a negative sign.</comment>
  </data>
  <data name="NoParsibleDigits" xml:space="preserve">
    <value>Could not find any recognizable digits.</value>
    <comment>Failed to find any identifiable numbers.</comment>
  </data>
  <data name="OneOrMoreErrorsExisted" xml:space="preserve">
    <value>One or more errors existed.</value>
    <comment>There are one or more errors.</comment>
  </data>
  <data name="OverflowByte" xml:space="preserve">
    <value>Value was either too large or too small for a Byte.</value>
    <comment>The value is too large or too small for Byte.</comment>
  </data>
  <data name="OverflowInt16" xml:space="preserve">
    <value>Value was either too large or too small for an Int16.</value>
    <comment>The value is too large or too small for Int16.</comment>
  </data>
  <data name="OverflowInt32" xml:space="preserve">
    <value>Value was either too large or too small for an Int32.</value>
    <comment>The value is too large or too small for Int32.</comment>
  </data>
  <data name="OverflowInt64" xml:space="preserve">
    <value>Value was either too large or too small for an Int64.</value>
    <comment>The value is too large or too small for Int64.</comment>
  </data>
  <data name="OverflowSByte" xml:space="preserve">
    <value>Value was either too large or too small for a SByte.</value>
    <comment>The value is too large or too small for SByte.</comment>
  </data>
  <data name="OverflowUInt16" xml:space="preserve">
    <value>Value was either too large or too small for a UInt16.</value>
    <comment>The value is too large or too small for UInt16.</comment>
  </data>
  <data name="OverflowUInt32" xml:space="preserve">
    <value>Value was either too large or too small for a UInt32.</value>
    <comment>The value is too large or too small for UInt32.</comment>
  </data>
  <data name="OverflowUInt64" xml:space="preserve">
    <value>Value was either too large or too small for a UInt64.</value>
    <comment>The value is too large or too small for UInt64.</comment>
  </data>
  <data name="ReversedArgument" xml:space="preserve">
    <value>The parameter '{0}' and '{1}' in reverse order.</value>
    <comment>Parameter order reversed.</comment>
  </data>
  <data name="StreamClosed" xml:space="preserve">
    <value>Cannot read from a closed '{0}'.</value>
    <comment>The stream is closed.</comment>
  </data>
  <data name="StringEmpty" xml:space="preserve">
    <value>Expecting non-empty string.</value>
    <comment>Need a non-empty string.</comment>
  </data>
  <data name="StringWhiteSpace" xml:space="preserve">
    <value>Expecting non-whitespace string.</value>
    <comment>Need a non-blank string.</comment>
  </data>
  <data name="Tristate_False" xml:space="preserve">
    <value>False</value>
    <comment>Tristate Enumeration Description False item.</comment>
  </data>
  <data name="Tristate_NotSure" xml:space="preserve">
    <value>NotSure</value>
    <comment>Tristate Enumeration Description NotSure item.</comment>
  </data>
  <data name="Tristate_True" xml:space="preserve">
    <value>True</value>
    <comment>Tristate Enumeration Description True item.</comment>
  </data>
  <data name="UniqueValue_Ambig" xml:space="preserve">
    <value>[Ambig]</value>
    <comment>Ambiguous text.</comment>
  </data>
  <data name="UniqueValue_Empty" xml:space="preserve">
    <value>[Empty]</value>
    <comment>Empty text.</comment>
  </data>
  <data name="UniqueValue_Unique" xml:space="preserve">
    <value>[Unique {0}]</value>
    <comment>Unique text.</comment>
  </data>
  <data name="WarningText" xml:space="preserve">
    <value>[Warning] </value>
    <comment>Warning text.</comment>
  </data>
  <data name="PropertyNoGetter" xml:space="preserve">
    <value>Property '{0}' has no get accessor.</value>
    <comment>Get accessor property does not exist.</comment>
  </data>
  <data name="PropertyNoSetter" xml:space="preserve">
    <value>Property '{0}' has no set accessor.</value>
    <comment>Set accessor property does not exist.</comment>
  </data>
  <data name="PropertyOrFieldNotFound" xml:space="preserve">
    <value>Public property or field named '{0}' does not exist.</value>
    <comment>Can not find public property or field.</comment>
  </data>
  <data name="PropertyOrFieldNotFound_NonPublic" xml:space="preserve">
    <value>Property or field named '{0}' does not exist.</value>
    <comment>Can not find property or field.</comment>
  </data>
  <data name="TypeMemberNotFound" xml:space="preserve">
    <value>Type member '{0}' not exists.</value>
    <comment>Can not find type member.</comment>
  </data>
  <data name="DelegateIncompatible" xml:space="preserve">
    <value>Delegate type '{0}' not compatible with '{1}'.</value>
    <comment>The type of the delegate is incompatible.</comment>
  </data>
  <data name="ProcessorNotFound_Id" xml:space="preserve">
    <value>Can not find processor identified '{1}' of type '{0}'.</value>
    <comment>The processor associated with a particular type could not be found.</comment>
  </data>
  <data name="ProcessorKeyAmbigus_TypeId" xml:space="preserve">
    <value>More than one key parameter is found of processors identified '{1}' of type '{0}'.</value>
    <comment>The processor finds multiple key parameters.</comment>
  </data>
  <data name="ProcessorKeyNotFound_TypeId" xml:space="preserve">
    <value>Key parameter of processors identified '{1}' of type '{0}' not found.</value>
    <comment>The processor can not find the key parameters.</comment>
  </data>
  <data name="ProcessorMismatch" xml:space="preserve">
    <value>Processor identified '{1}' of type '{0}', does not match the needed static / instance.</value>
    <comment>Processor static / instance mismatch.</comment>
  </data>
  <data name="ProcessorMixed" xml:space="preserve">
    <value>Existing static and instance method in processors identified '{1}' of type '{0}'.</value>
    <comment>The processor is mixed with static and instance methods.</comment>
  </data>
  <data name="ProcessorParameterMismatch_TypeId" xml:space="preserve">
    <value>Processors identified '{1}' of type '{0}' have different parameter length or parameter type.</value>
    <comment>Processor parameters do not match.</comment>
  </data>
  <data name="ProcessorKeyAmbigus" xml:space="preserve">
    <value>More than one key parameter is found of processors.</value>
    <comment>The processor finds multiple key parameters.</comment>
  </data>
  <data name="ProcessorKeyNotFound" xml:space="preserve">
    <value>Key parameter of processors not found.</value>
    <comment>The processor can not find the key parameters.</comment>
  </data>
  <data name="ProcessorParameterMismatch" xml:space="preserve">
    <value>Processors have different parameter length or parameter type.</value>
    <comment>Processor parameters do not match.</comment>
  </data>
  <data name="ProcessorNotFound" xml:space="preserve">
    <value>Can not find processor of type '{0}'.</value>
    <comment>The processor associated with a particular type could not be found.</comment>
  </data>
  <data name="AmbiguousUserDefinedConverter" xml:space="preserve">
    <value>Ambiguous user-defined converter found when converting '{0}' to '{1}'.</value>
    <comment>Find multiple user-defined type conversions.</comment>
  </data>
  <data name="MustContainValidInfo" xml:space="preserve">
    <value>Must specify valid information for parsing in the string.</value>
    <comment>The string does not contain available information.</comment>
  </data>
  <data name="InvalidThreshold" xml:space="preserve">
    <value>The specified threshold is out of range.</value>
    <comment>Threshold is out of range.</comment>
  </data>
  <data name="BindOpenConstructedMethod" xml:space="preserve">
    <value>Cannot bind to open constructed method.</value>
    <comment>Can not bind to open constructor.</comment>
  </data>
  <data name="TypeMissingDefaultConstructor" xml:space="preserve">
    <value>Type '{0}' does not have a default constructor.</value>
    <comment>The type does not contain a default constructor.</comment>
  </data>
  <data name="TypeContainsGenericParameters" xml:space="preserve">
    <value>Type '{0}' contains generic parameters.</value>
    <comment>The type contains generic parameters.</comment>
  </data>
  <data name="BindTargetField" xml:space="preserve">
    <value>Cannot bind to the target field because its type is not compatible with that of the delegate type.</value>
    <comment>Error binding to the target field.</comment>
  </data>
  <data name="BindTargetMethod" xml:space="preserve">
    <value>Cannot bind to the target method because its signature is not compatible with that of the delegate type.</value>
    <comment>Error binding to the target method.</comment>
  </data>
  <data name="BindTargetProperty" xml:space="preserve">
    <value>Cannot bind to the target property because its signature is not compatible with that of the delegate type.</value>
    <comment>Error binding to the target property.</comment>
  </data>
  <data name="BindTargetPropertyNoGet" xml:space="preserve">
    <value>Cannot bind to the target property because no get accessor exists.</value>
    <comment>Error binding to the target property.</comment>
  </data>
  <data name="BindTargetPropertyNoSet" xml:space="preserve">
    <value>Cannot bind to the target property because no set accessor exists.</value>
    <comment>Error binding to the target property.</comment>
  </data>
  <data name="NeedGenericMethodDefinition" xml:space="preserve">
    <value>'{0}' is not a generic method definition.</value>
    <comment>Does not represent a generic method definition.</comment>
  </data>
  <data name="CannotInferenceGenericArguments" xml:space="preserve">
    <value>Can not infer type argument from parameters.</value>
    <comment>Invalid generic parameter inference.</comment>
  </data>
  <data name="UnboundGenParam" xml:space="preserve">
    <value>Late bound operations cannot be performed on types or methods for which ContainsGenericParameters is true.</value>
    <comment>You can not bind late types and methods that contain unassigned generic type parameters.</comment>
  </data>
  <data name="ArgumentBothNull" xml:space="preserve">
    <value>Value of parameter '{0}' and '{1}' can not both be null.</value>
    <comment>All parameters are null.</comment>
  </data>
  <data name="AmbiguousMatchField" xml:space="preserve">
    <value>More than one field is found with the specified name and matching the specified binding constraints.</value>
    <comment>Find multiple fields with the specified name that match the specified binding constraint.</comment>
  </data>
  <data name="AmbiguousMatchMethod" xml:space="preserve">
    <value>More than one method is found with the specified name and matching the specified binding constraints.</value>
    <comment>Find multiple methods with the specified name and match the specified binding constraint.</comment>
  </data>
  <data name="AmbiguousMatchProperty" xml:space="preserve">
    <value>More than one property is found with the specified name and matching the specified binding constraints.</value>
    <comment>Find multiple attributes with the specified name that match the specified binding constraint.</comment>
  </data>
  <data name="DuplicateName" xml:space="preserve">
    <value>A parameter with the same name has already existed.</value>
    <comment>Parameter name is the same.</comment>
  </data>
  <data name="NamedParamTooBig" xml:space="preserve">
    <value>Named parameter array cannot be bigger than argument array.</value>
    <comment>Named parameter array is too long.</comment>
  </data>
  <data name="InvalidCacheOptions" xml:space="preserve">
    <value>Can not find constructor matchs options in type '{0}'.</value>
    <comment>The buffer pool option is invalid.</comment>
  </data>
  <data name="InvalidCacheType" xml:space="preserve">
    <value>Invalid cache type '{0}'.</value>
    <comment>Buffer pool type is invalid.</comment>
  </data>
  <data name="InvalidCacheType_ICache" xml:space="preserve">
    <value>Invalid cache type '{0}', did not implement ICache{TKey, TValue}.</value>
    <comment>Invalid buffer pool type - ICache interface not implemented.</comment>
  </data>
  <data name="ConflictingAcceptAction" xml:space="preserve">
    <value>Accept action is conflicted with Reject action.</value>
    <comment>Conflict acceptance action.</comment>
  </data>
  <data name="ConflictingRejectAction" xml:space="preserve">
    <value>Reject action is conflicted with Accept action.</value>
    <comment>Conflict of refusal action.</comment>
  </data>
  <data name="InvalidLexerContext" xml:space="preserve">
    <value>Invalid lexer context '{0}'.</value>
    <comment>Invalid lexical analysis context.</comment>
  </data>
  <data name="InvalidSourceLocatable" xml:space="preserve">
    <value>Argument is not a valid instance of ISourceLocatable.</value>
    <comment>Invalid source file range.</comment>
  </data>
  <data name="InvalidSourceRange" xml:space="preserve">
    <value>From {0} to {1} is not a valid source range.</value>
    <comment>Not a valid source file range.</comment>
  </data>
  <data name="UnrecognizedToken" xml:space="preserve">
    <value>Unrecognized token '{0}'.</value>
    <comment>Unrecognized lexical unit exception.</comment>
  </data>
  <data name="WeakDelegateForMethodWithClosure" xml:space="preserve">
    <value>Cannot create weak delegate for anonymous method with closure.</value>
    <comment>You can not create a weak reference delegate.</comment>
  </data>
  <data name="PropertyNotFound" xml:space="preserve">
    <value>Property '{0}' not found.</value>
    <comment>Property is not found.</comment>
  </data>
  <data name="PropertyNotSupported" xml:space="preserve">
    <value>Specified property is not supported.</value>
    <comment>Property is not supported.</comment>
  </data>
</root>